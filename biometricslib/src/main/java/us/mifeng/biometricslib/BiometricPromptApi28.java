package us.mifeng.biometricslib;

import android.app.Activity;
import android.content.DialogInterface;
import android.hardware.biometrics.BiometricPrompt;
import android.os.Build;
import android.os.CancellationSignal;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.util.Base64;

import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.CertificateException;
import java.security.spec.ECGenParameterSpec;
import java.util.concurrent.Executor;

@RequiresApi(Build.VERSION_CODES.P)
public class BiometricPromptApi28 implements IBiometricPrompt {

    private static final String KEY_NAME = "BiometricPromptApi28";
    private Activity activity;
    private BiometricPrompt mBiomericPrompt;
    private BiometricPromptManager.OnBiometricIdentifyCallback mIdentifyCallback;
    private CancellationSignal mCancellationSignal;
    private Signature mSignature;
    private String mToBeSignedMessage;



    public BiometricPromptApi28(Activity activity) {
        this.activity = activity;

        mBiomericPrompt = new BiometricPrompt
                .Builder(activity)
                .setTitle("Verification")
                .setDescription("Verify fingerprint to continue")
                .setSubtitle("")
                .setNegativeButton("Use Password", activity.getMainExecutor(), (dialog,which)->{
                    if (null != mIdentifyCallback){
                        mIdentifyCallback.onUsePassword();
                    }
                    mCancellationSignal.cancel();
                }).build();

        try {
            KeyPair keyPair = generateKeyPair(KEY_NAME,true);
            mToBeSignedMessage = new StringBuilder()
                    .append(Base64.encodeToString(keyPair.getPublic().getEncoded(), Base64.URL_SAFE))
                    .append(":")
                    .append(KEY_NAME)
                    .append(":")
                    // Generated by the server to protect against replay attack
                    .append("12345")
                    .toString();
            mSignature = initSignature(KEY_NAME);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @RequiresApi(Build.VERSION_CODES.P)
    @Override
    public void authenticate(@NonNull CancellationSignal cancel, @NonNull BiometricPromptManager.OnBiometricIdentifyCallback callback) {
        mIdentifyCallback = callback;
        mCancellationSignal = cancel;
        if (mCancellationSignal == null){
            mCancellationSignal = new CancellationSignal();
        }
        mCancellationSignal.setOnCancelListener(new CancellationSignal.OnCancelListener() {
            @Override
            public void onCancel() {

            }
        });
        mBiomericPrompt.authenticate(new BiometricPrompt.CryptoObject(mSignature),
                mCancellationSignal, activity.getMainExecutor(), new BiometricPromptCallbackImpl());
    }

    private class BiometricPromptCallbackImpl extends BiometricPrompt.AuthenticationCallback{
        @Override
        public void onAuthenticationError(int errorCode, CharSequence errString) {
            super.onAuthenticationError(errorCode, errString);
            mCancellationSignal.cancel();
        }

        @Override
        public void onAuthenticationFailed() {
            super.onAuthenticationFailed();
        }

        @Override
        public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
            super.onAuthenticationHelp(helpCode, helpString);
        }

        @Override
        public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
            super.onAuthenticationSucceeded(result);
        }
    }

    private KeyPair generateKeyPair(String keyName,boolean invaldateByBiometricEnrollment) throws Exception {

        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC,"AndroidKeyStore");

        KeyGenParameterSpec.Builder builder = new KeyGenParameterSpec.Builder(keyName,KeyProperties.PURPOSE_SIGN)
                .setAlgorithmParameterSpec(new ECGenParameterSpec("secp256r1"))
                .setDigests(KeyProperties.DIGEST_SHA256,
                        KeyProperties.DIGEST_SHA384,
                        KeyProperties.DIGEST_SHA512)
                .setUserAuthenticationRequired(true)
                .setInvalidatedByBiometricEnrollment(invaldateByBiometricEnrollment);
        keyPairGenerator.initialize(builder.build());

        return keyPairGenerator.generateKeyPair();
    }

    private KeyPair getKeyPair(String keyName) throws Exception{
        KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
        keyStore.load(null);

        if (keyStore.containsAlias(keyName)){
            PublicKey publicKey = keyStore.getCertificate(keyName).getPublicKey();
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyName,null);
            return new KeyPair(publicKey,privateKey);
        }
        return null;
    }

    private Signature initSignature(String keyName) throws Exception {
        KeyPair keyPair = getKeyPair(keyName);
        if (null != keyPair){
            Signature signature = Signature.getInstance("SHA256withECDSA");
            signature.initSign(keyPair.getPrivate());
            return signature;
        }
        return null;
    }
}
